"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EmailLoginInput {
  email: String!
  password: String!
}

type EmailPasswordUser {
  id: EntityId!
  email: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmailPasswordUserCreateInput {
  email: String!
  password: String!
  user: UserNestedInput!
}

input EmailPasswordUserEditInput {
  id: EntityId!
  email: String
  password: String
  user: UserNestedInput
}

input EmailPasswordUserNestedInput {
  id: EntityId
  email: String
  password: String
  user: UserNestedInput
}

input EmailPasswordUserSearchInput {
  id: EntityId
  email: String
  password: String
  user: ReferenceSearchInput
}

input EmailPasswordUserSearchOrderInput {
  id: OrderEnum
  email: OrderEnum
  password: OrderEnum
  user: OrderEnum
}

input EmailRegisterInput {
  email: String!
  password: String!
  name: String!
}

input EmailVerificationInput {
  verificationCode: String!
}

"""ID scalar type"""
scalar EntityId

input FacebookLoginInput {
  facebookAccessToken: String!
}

type FacebookUser {
  id: EntityId!
  email: String
  externalFacebookUserId: String!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FacebookUserCreateInput {
  email: String
  externalFacebookUserId: String!
  user: UserNestedInput!
}

input FacebookUserEditInput {
  id: EntityId!
  email: String
  externalFacebookUserId: String
  user: UserNestedInput
}

input FacebookUserNestedInput {
  id: EntityId
  email: String
  externalFacebookUserId: String
  user: UserNestedInput
}

input FacebookUserSearchInput {
  id: EntityId
  email: String
  externalFacebookUserId: String
  user: ReferenceSearchInput
}

input FacebookUserSearchOrderInput {
  id: OrderEnum
  email: OrderEnum
  externalFacebookUserId: OrderEnum
  user: OrderEnum
}

type File {
  id: EntityId!
  contentBase64: String!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  thumbUrl: String!
}

input FileCreateInput {
  contentBase64: String!
  user: UserNestedInput
}

input FileEditInput {
  id: EntityId!
  contentBase64: String
  user: UserNestedInput
}

input FileNestedInput {
  id: EntityId
  contentBase64: String
  user: UserNestedInput
}

input FileSearchInput {
  id: EntityId
  contentBase64: String
  user: ReferenceSearchInput
}

input FileSearchOrderInput {
  id: OrderEnum
  contentBase64: OrderEnum
  user: OrderEnum
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  emailLogin(input: EmailLoginInput!): LoginResponse!
  facebookLogin(input: FacebookLoginInput!): LoginResponse!
  logout: Boolean!
  createEmailPasswordUser(input: EmailPasswordUserCreateInput!): EmailPasswordUser!
  updateEmailPasswordUser(input: EmailPasswordUserEditInput!): EmailPasswordUser!
  deleteEmailPasswordUsers(ids: [ID!]!): Boolean!
  emailRegister(input: EmailRegisterInput!): Boolean!
  verifyEmail(input: EmailVerificationInput!): LoginResponse!
  createFacebookUser(input: FacebookUserCreateInput!): FacebookUser!
  updateFacebookUser(input: FacebookUserEditInput!): FacebookUser!
  deleteFacebookUsers(ids: [ID!]!): Boolean!
  createFile(input: FileCreateInput!): File!
  updateFile(input: FileEditInput!): File!
  deleteFiles(ids: [ID!]!): Boolean!
  createUser(input: UserCreateInput!): User!
  updateUser(input: UserEditInput!): User!
  deleteUsers(ids: [ID!]!): Boolean!
}

enum OrderEnum {
  DESC
  ASC
}

type PaginatedEmailPasswordUserResponse {
  items: [EmailPasswordUser!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedFacebookUserResponse {
  items: [FacebookUser!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedFileResponse {
  items: [File!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedUserResponse {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type Query {
  emailPasswordUser(id: EntityId!): EmailPasswordUser!
  searchEmailPasswordUsers(order: [EmailPasswordUserSearchOrderInput!], take: Int, skip: Int, search: EmailPasswordUserSearchInput): PaginatedEmailPasswordUserResponse!
  emailPasswordUsers: [EmailPasswordUser!]!
  facebookUser(id: EntityId!): FacebookUser!
  searchFacebookUsers(order: [FacebookUserSearchOrderInput!], take: Int, skip: Int, search: FacebookUserSearchInput): PaginatedFacebookUserResponse!
  facebookUsers: [FacebookUser!]!
  file(id: EntityId!): File!
  searchFiles(order: [FileSearchOrderInput!], take: Int, skip: Int, search: FileSearchInput): PaginatedFileResponse!
  files: [File!]!
  me: User!
  user(id: EntityId!): User!
  searchUsers(order: [UserSearchOrderInput!], take: Int, skip: Int, search: UserSearchInput): PaginatedUserResponse!
  users: [User!]!
}

input ReferenceSearchInput {
  id: EntityId
}

type User {
  id: EntityId!
  name: String!
  facebookUser: FacebookUser
  emailPasswordUser: EmailPasswordUser
  profileImage: File
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserCreateInput {
  name: String!
  facebookUser: FacebookUserNestedInput
  emailPasswordUser: EmailPasswordUserNestedInput
  profileImage: FileNestedInput
}

input UserEditInput {
  id: EntityId!
  name: String
  facebookUser: FacebookUserNestedInput
  emailPasswordUser: EmailPasswordUserNestedInput
  profileImage: FileNestedInput
}

input UserNestedInput {
  id: EntityId
  name: String
  facebookUser: FacebookUserNestedInput
  emailPasswordUser: EmailPasswordUserNestedInput
  profileImage: FileNestedInput
}

input UserSearchInput {
  id: EntityId
  name: String
  facebookUser: ReferenceSearchInput
  emailPasswordUser: ReferenceSearchInput
  profileImage: ReferenceSearchInput
}

input UserSearchOrderInput {
  id: OrderEnum
  name: OrderEnum
  facebookUser: OrderEnum
  emailPasswordUser: OrderEnum
  profileImage: OrderEnum
}
