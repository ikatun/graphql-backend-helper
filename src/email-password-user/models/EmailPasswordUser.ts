/* eslint-disable @typescript-eslint/no-unused-vars */
/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, JoinColumn, Entity, OneToOne, ManyToOne, OneToMany, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';

import { User } from '../../user/models/User';

import * as auth from '../../authorization/auth-checkers';
import { EmailPasswordUserCreateInput } from '../inputs/EmailPasswordUserCreateInput';
import { EmailPasswordUserEditInput } from '../inputs/EmailPasswordUserEditInput';
import { EmailPasswordUserNestedInput } from '../inputs/EmailPasswordUserNestedInput';
import { IRequestContext } from '../../shared/IRequestContext';
import { IAuthorizable } from '../../authorization/IAuthorizable';
import { EntityId, EntityIdScalar } from '../../shared/EntityId';
import { EmailPasswordUserAuth } from '../auth/EmailPasswordUserAuth';
import { getInputOperationType } from '../../shared/get-input-operation-type';
import { noChange } from '../../shared/no-change';
import { asPromise } from '../../shared/as-promise';

import { updateUserRelation } from './update-operations/emailPasswordUser-update-operations';

// <keep-imports>
import {hashPassword, verifyPassword} from '../../authentication/crypto';
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class EmailPasswordUser implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  id: EntityId;

  public authorizationChecker = new EmailPasswordUserAuth(this);

  @Field(() => String, )
  @Column({
    // <custom-column-args>
    unique: true,
    // </custom-column-args>
  })
  public email: string;

  
  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public passwordHash: string;

  
  @Column({"nullable":true,"type":"text",
    // <custom-column-args>
    // </custom-column-args>
  })
  public verificationCode?: string | null;

  @OneToOne(() => User, (user) => user.emailPasswordUser , {"nullable":false,"onDelete":"CASCADE"})
  @Field(() => User , {"nullable":false})
  @JoinColumn()
  public user: Promise<User>;

  @CreateDateColumn()
  @Field()
  createdAt: Date;

  @UpdateDateColumn()
  @Field()
  updatedAt: Date;

  public async update(input: EmailPasswordUserCreateInput | EmailPasswordUserEditInput | EmailPasswordUserNestedInput, context: IRequestContext) {
    const { user, ...data } = input;
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    await updateUserRelation(this, user, context);

    context.modelsToSave.push(this);

    // <keep-update-code>
    if (this.passwordHash === undefined && input.password) {
      this.passwordHash = await hashPassword(input.password);
    }
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  public async passwordMatches(password: string) {
    return verifyPassword(password, this.passwordHash);
  }
  // </keep-methods>
}
